<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>图片异或加密</title>
    <url>/2024/10/20/%E5%9B%BE%E7%89%87%E5%BC%82%E6%88%96%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>异或（Exclusive
or）是对两个运算元的一种逻辑分析类型。与一般的逻辑或不同，当两两数值相同时为否，而数值不同时为真。不常使用异或操作符可能容易记错，这里有个小技巧：异或就是求异，找不同。</p>
<span id="more"></span>
<center>
<img src="/2024/10/20/图片异或加密/xor.png" title="异或示意图" style="zoom:67%;">
</center>
<h1 id="异或操作">异或操作</h1>
<p>异或满足一下性质：</p>
<ul>
<li>结合律：A<sup>(B</sup>C)=(A<sup>B)</sup>C</li>
<li>交换律：A<sup>B=B</sup>A</li>
<li>恒等律：A^0=A</li>
<li>归零律：A^A=0</li>
<li>对合运算：A<sup>B</sup>B=A^0=A</li>
</ul>
<p>备注：^在编程语言中表示异或，和布尔代数中的运算符“逻辑与”不要弄混。</p>
<p>有一种密码称之为<strong>互逆密码</strong>，将明文输入密码学系统以获得密文一样，可以将密文输入到系统中的相同位置以获得明文。互易密码有时也称为<strong>自反密码</strong>。对合运算性质的操作常用于互逆密码。</p>
<p>因此异或操作有一个经典的加密算法即异或密码。</p>
<h1 id="异或密码">异或密码</h1>
<p>比如文本串加密，文本串行的每个字符可以通过与给定的密钥进行按位异或运算来加密。如果要解密，只需要将加密后的结果与密钥再次进行按位异或运算即可。</p>
<p>如果使用不断重复的密钥，利用频率分析就可以破解这种简单的异或密码。如果消息的内容被猜出或知道，密钥就会泄露。异或密码值得使用的原因主要是其易于实现，而且<strong>计算成本小</strong>。简单重复异或加密有时用于不需要特别安全的情况下来隐藏信息。</p>
<p>如果密钥是随机的（不重复），而且与消息长度相同，异或密码就会更为安全。当然异或密码运算符在<a href="https://zh.wikipedia.org/wiki/已知明文攻击">已知明文攻击</a>下是脆弱的。因为明文^密文=密钥。</p>
<p>设A为明文，B为密钥，C为密文，则A<sup>B=C，则A</sup>C=A<sup>A</sup>B=B，很容易根据A和C求B</p>
<h1 id="字符串异或加密">字符串异或加密</h1>
<p>字符串异或加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_string_xor</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试异或加密解密&quot;&quot;&quot;</span></span><br><span class="line">    message = <span class="string">&#x27;This is a secret message&#x27;</span></span><br><span class="line">    key = <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">    encrypted = string_xor(message, key)</span><br><span class="line">    decrypted = string_xor(encrypted, key)</span><br><span class="line">    <span class="keyword">assert</span> message == decrypted</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出加密后的字符串,可能是乱码，一般会再base64下</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xor-encrypted:&#x27;</span>, encrypted)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出解密后的字符串 &#x27;This is a secret message&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xor-decrypted:&#x27;</span>, decrypted)</span><br><span class="line"></span><br><span class="line">    decrypted_key = string_xor(message, encrypted)</span><br><span class="line">    <span class="comment"># 输出解密后的key &#x27;whoami&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;xor-key:&quot;</span>, decrypted_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string_xor</span>(<span class="params">message: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;字符串异或&quot;&quot;&quot;</span></span><br><span class="line">    key_patch = []</span><br><span class="line">    len_key = <span class="built_in">len</span>(key)</span><br><span class="line">    len_msg = <span class="built_in">len</span>(message)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_msg):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= len_key:</span><br><span class="line">            key_patch.append(key[i % len_key])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            key_patch.append(key[i])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ <span class="built_in">ord</span>(k)) <span class="keyword">for</span> (c, k) <span class="keyword">in</span> <span class="built_in">zip</span>(message, key_patch)])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="图片异或加密">图片异或加密</h1>
<p>使用opencv进行图片加密很贱，图片异或加密的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">image_xor</span>(<span class="params">image, image_key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图片异或&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> cv2.bitwise_xor(image, image_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_image_xor</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试图片异或&quot;&quot;&quot;</span></span><br><span class="line">    img = cv2.imread(data_file_path(<span class="string">&#x27;data/image/dog_bike_car.jpg&#x27;</span>))</span><br><span class="line">    <span class="comment"># 创建一个和原图像大小相同的随机图像</span></span><br><span class="line">    rows, cols, channels = img.shape</span><br><span class="line">    img_key = np.random.randint(<span class="number">0</span>, <span class="number">256</span>, (rows, cols, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;img&#x27;</span>, img)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;img_key&#x27;</span>, img_key)</span><br><span class="line"></span><br><span class="line">    img_encrypted = image_xor(img, img_key)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;img_encrypted&#x27;</span>, img_encrypted)</span><br><span class="line">    img_decrypted = image_xor(img_encrypted, img_key)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;img_decrypted&#x27;</span>, img_decrypted)</span><br><span class="line"></span><br><span class="line">    xor_key = image_xor(img, img_encrypted)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;xor_key&#x27;</span>, xor_key)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>直接使用异或加密很简单，但是很不安全，所以异或一般作为更为复杂的加密算法的组成部分。</p>
<p>关于图片强加密有一篇综述写的不错：An overview of encryption
algorithms in color images。</p>
]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏24点</title>
    <url>/2020/01/10/%E6%B8%B8%E6%88%8F24%E7%82%B9/</url>
    <content><![CDATA[<h4 id="最难忘的游戏">最难忘的游戏</h4>
<p>大学时代，买入一台组装机，预装了大富翁4，初完颇为兴奋，久完索然乏味。后来室友纷纷推荐，玩了少许新的游戏，最让人沉醉的还是太阁立志传5。那段缤纷绚丽的战国历史犹在眼前，猴子，第六天魔王，独眼龙，风林火山，车悬，无刀取，转，忍犬之术，雷暴之术，村雨，剑圣历历在目。</p>
<span id="more"></span>
<img src="/2020/01/10/%E6%B8%B8%E6%88%8F24%E7%82%B9/%E5%A4%AA%E9%98%81%E7%AB%8B%E5%BF%97%E4%BC%A0V.jpg" class title="太阁立志传">
<h4 id="那些小游戏">那些小游戏</h4>
<p>当我孩子还未长大，我想我会让他熟悉这些小游戏，无论是算数填空，二十一记，还是调制药物，排列茶器，都是值得一试的智力小游戏。我想做一个电脑抑或手机的锁屏游戏，难度随着学历增长吧。啊哈，会成为他的童年乐趣（阴影）吧。</p>
<h4 id="点">24点</h4>
<p>我的家人们最喜欢玩的纸牌游戏就是24点了，无论小学生还是研究生，寻找四张牌中的数学奥妙总让人乐此不疲。也许那时就慢慢培养了数学兴趣。</p>
<p>很久就想写下各个小游戏的实现，总是把时间分给了玩游戏，所以做游戏反而不得闲了。后来想也许我得在自己的网站上试试code
style。那就小游戏写写吧（玩游戏菜鸟，写游戏亦然）。</p>
<h5 id="表达式穷举">表达式穷举</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point24</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        calculate(Lists.newArrayList(<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>)).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        calculate(Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>)).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        calculate(Lists.newArrayList(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>)).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        calculate(Lists.newArrayList(<span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>)).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        calculate(Lists.newArrayList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>)).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        calculate(Lists.newArrayList(<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>)).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title function_">calculate</span><span class="params">(List&lt;Integer&gt; numbers)</span> &#123;</span><br><span class="line">        List&lt;String&gt; opList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        opList.add(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        opList.add(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        opList.add(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        opList.add(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; numberPerm = Permutation.permutation(numbers);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; opSample = Sample.sample(opList, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> crossJoin(numberPerm, opSample);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title function_">crossJoin</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; a, List&lt;List&lt;String&gt;&gt; b)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; expression = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        a.forEach(ai -&gt; &#123;</span><br><span class="line">            b.forEach(bi -&gt; &#123;</span><br><span class="line">                List&lt;String&gt; result = cal(ai, bi);</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">                    expression.addAll(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> expression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">cal</span><span class="params">(List&lt;Integer&gt; numbers, List&lt;String&gt; ops)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Exp&gt; exps = numbers.stream().map(i -&gt; <span class="keyword">new</span> <span class="title class_">Exp</span>(i.doubleValue())).collect(Collectors.toList());</span><br><span class="line">            List&lt;Integer&gt; opIndex = Lists.newArrayList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; permutation = Permutation.permutation(opIndex);</span><br><span class="line">            <span class="keyword">return</span> permutation.stream().map(oi -&gt; &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">first</span> <span class="operator">=</span> oi.get(<span class="number">0</span>);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">second</span> <span class="operator">=</span> oi.get(<span class="number">1</span>);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">third</span> <span class="operator">=</span> oi.get(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">Exp</span> <span class="variable">op1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(first), exps.get(first), exps.get(first + <span class="number">1</span>));</span><br><span class="line">                Exp op2;</span><br><span class="line">                <span class="type">Exp</span> <span class="variable">op3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exp</span>(<span class="number">0.0</span>);</span><br><span class="line">                <span class="keyword">if</span> (second - first == <span class="number">1</span>) &#123;</span><br><span class="line">                    op2 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(second), op1, exps.get(second + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (third &gt; second) &#123;</span><br><span class="line">                        op3 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(third), op2, exps.get(third + <span class="number">1</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        op3 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(third), exps.get(third), op2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (second - first == -<span class="number">1</span>) &#123;</span><br><span class="line">                    op2 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(second), exps.get(second), op1);</span><br><span class="line">                    <span class="keyword">if</span> (third &gt; second) &#123;</span><br><span class="line">                        op3 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(third), op2, exps.get(third + <span class="number">1</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        op3 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(third), exps.get(third), op2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (second - first == <span class="number">2</span>) &#123;</span><br><span class="line">                    op2 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(second), exps.get(second), exps.get(second + <span class="number">1</span>));</span><br><span class="line">                    op3 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(third), op1, op2);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (second - first == -<span class="number">2</span>) &#123;</span><br><span class="line">                    op2 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(second), exps.get(second), exps.get(second + <span class="number">1</span>));</span><br><span class="line">                    op3 = <span class="keyword">new</span> <span class="title class_">Exp</span>(ops.get(third), op2, op1);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Math.abs(op3.value - <span class="number">24</span>) &lt; <span class="number">1e-5</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> op3.simpleString();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;).filter(Objects::nonNull).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> value;</span><br><span class="line">        <span class="keyword">private</span> String exp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Exp</span><span class="params">(<span class="type">double</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.exp = String.valueOf((<span class="type">int</span>) value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Exp</span><span class="params">(String op, Exp a, Exp b)</span> &#123;</span><br><span class="line">            value = op(op, a.value, b.value);</span><br><span class="line">            exp = <span class="string">&quot;(&quot;</span> + a.exp + op + b.exp + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> exp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">simpleString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (exp.startsWith(<span class="string">&quot;(&quot;</span>) &amp;&amp; exp.endsWith(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> exp.substring(<span class="number">1</span>, exp.length() - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> exp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">op</span><span class="params">(String op, Double a, Double b)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> a - b;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> a * b;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> a / b;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;error op&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中有个全排列的类和放回抽样的类，递归是个伟大的发明，它让人类掌握了无穷的力量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不放回抽样=全排列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Permutation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; abcd = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        abcd.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        abcd.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        abcd.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        abcd.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = permutation(abcd);</span><br><span class="line">        result.forEach(item -&gt; System.out.println(item.stream().collect(Collectors.joining())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;List&lt;T&gt;&gt; <span class="title function_">permutation</span><span class="params">(List&lt;T&gt; itemList)</span> &#123;</span><br><span class="line">        List&lt;List&lt;T&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (itemList.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            result.add(itemList);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; itemList.size(); i++) &#123;</span><br><span class="line">            List&lt;T&gt; otherList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(itemList);</span><br><span class="line">            <span class="type">T</span> <span class="variable">first</span> <span class="operator">=</span> otherList.remove(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 递归公式 p(n)=Σ(0-&gt;n) p1(i)__p(n-i) 其中p(n)返回list&lt;list&gt;  p1(i)为返回单元素 __为单元素和list&lt;list&gt;取的逐项拼接逻辑</span></span><br><span class="line">            List&lt;List&lt;T&gt;&gt; otherPermutationResult = permutation(otherList);</span><br><span class="line">            <span class="keyword">for</span> (List&lt;T&gt; otherPermutation : otherPermutationResult) &#123;</span><br><span class="line">                List&lt;T&gt; firstList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                firstList.add(first);</span><br><span class="line">                firstList.addAll(otherPermutation);</span><br><span class="line"></span><br><span class="line">                result.add(firstList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放回抽样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        data.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        data.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        data.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sample(data, <span class="number">3</span>).forEach(i -&gt; System.out.println(i.stream().collect(Collectors.joining())));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----&quot;</span>);</span><br><span class="line">        sample(data, <span class="number">2</span>).forEach(i -&gt; System.out.println(i.stream().collect(Collectors.joining())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;List&lt;T&gt;&gt; <span class="title function_">sample</span><span class="params">(List&lt;T&gt; data, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        List&lt;List&lt;T&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            data.forEach(i -&gt; &#123;</span><br><span class="line">                List&lt;T&gt; item = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">                item.add(i);</span><br><span class="line">                result.add(item);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;T&gt;&gt; smallResult = sample(data, size - <span class="number">1</span>);</span><br><span class="line">        data.forEach(i -&gt; &#123;</span><br><span class="line">            smallResult.forEach(s -&gt; &#123;</span><br><span class="line">                List&lt;T&gt; item = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                item.add(i);</span><br><span class="line">                item.addAll(s);</span><br><span class="line">                result.add(item);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="回溯">回溯</h5>
<p>后来leetcode上给出了一个更为简洁的方案，即从收敛条件看两个数有加减乘除四则运算，其中减除需要交换下，共6种组合。加上除数不能为空判断即可。那么我们的递归逻辑是把大于等于3的数组里面任选2个，转化为1个（四则运算），那么维度降低，知道降低为一维进行求值即可。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>图片猫脸转换加密</title>
    <url>/2024/11/03/%E5%9B%BE%E7%89%87%E7%8C%AB%E8%84%B8%E8%BD%AC%E6%8D%A2%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>上文提到异或加密比较简单，会被已知明文攻击。所以本次引入一个猫脸转换(Arnold变换)加密，参考An
overview of encryption algorithms in color images。</p>
<span id="more"></span>
<h1 id="arnold变换">Arnold变换</h1>
<p>猫脸变换即Arnold变换，据说是因第一张验证图片是猫脸而得名。可以对图像进行置乱，使得原本有意义的图像变成一张无意义的图像。可以看作是拉伸，压缩，折叠及拼接的过程（仿射变换），使得原本有意义的图像变成一张无意义的图像。通过这一过程，可以将离散化的数字图像矩阵中的点重新排列，使其他人无法获取图像真实内容。该变换可以用于图片加密，也可以用于水印部分的置乱。</p>
<p>当图像的长宽相等是，Arnold可以进行逆变换。相应的变换公式和逆变换公式可以用于快速的加密和解密。</p>
<p>​ 正变换公式如下：</p>
<p><span class="math display">\[\left(\begin{array}{cc}x&#39; \\ y&#39;
\end{array}\right)=\left[\begin{array}{a}1 &amp; a \\ b &amp; ab+1
\end{array} \right]\left(\begin{array}{b} x \\y \end{array}
\right)mod(N)\]</span></p>
<p>逆变换公式如下：</p>
<p><span class="math display">\[\left(\begin{array}{cc}x \\ y
\end{array}\right)=\left[\begin{array}{a}ab+1 &amp; -a \\ -b &amp; 1
\end{array} \right]\left(\begin{array}{b} x&#39; \\y&#39; \end{array}
\right)mod(N)\]</span></p>
<p>通常一次Arnold变换达不到理想效果，需要对图像进行连续多次的变换。Arnold变换具有周期性，即对图像连续进行Arnold变换，最终又能得到原图像。变换的周期和图像的尺寸有关，统计如下表：</p>
<p>表1-1 Arnold变换周期</p>
<table style="width:100%;">
<colgroup>
<col style="width: 18%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
</colgroup>
<thead>
<tr class="header">
<th>边长N</th>
<th>2</th>
<th>4</th>
<th>8</th>
<th>16</th>
<th>32</th>
<th>64</th>
<th>128</th>
<th>246</th>
<th>512</th>
<th>1024</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>周期T</strong></td>
<td>3</td>
<td>3</td>
<td>6</td>
<td>12</td>
<td>24</td>
<td>48</td>
<td>96</td>
<td>192</td>
<td>384</td>
<td>768</td>
</tr>
</tbody>
</table>
<h1 id="变换代码">变换代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">arnold</span>(<span class="params">img, shuffle_times, a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Arnold&#x27;s cat map&quot;&quot;&quot;</span></span><br><span class="line">    r, c, d = img.shape</span><br><span class="line">    p = np.zeros(img.shape, np.uint8)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(shuffle_times):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                x = (i + b * j) % r</span><br><span class="line">                y = (a * i + (a * b + <span class="number">1</span>) * j) % c</span><br><span class="line">                p[x, y, :] = img[i, j, :]</span><br><span class="line">        img = np.copy(p)</span><br><span class="line">    <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure>
<h1 id="逆变换代码">逆变换代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">de_arnold</span>(<span class="params">img, shuffle_times, a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Arnold&#x27;s cat map&quot;&quot;&quot;</span></span><br><span class="line">    r, c, d = img.shape</span><br><span class="line">    p = np.zeros(img.shape, np.uint8)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(shuffle_times):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                x = ((a * b + <span class="number">1</span>) * i - b * j) % r</span><br><span class="line">                y = (- a * i + j) % c</span><br><span class="line">                p[x, y, :] = img[i, j, :]</span><br><span class="line">        img = np.copy(p)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="验证不同参数">验证不同参数</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_arnold</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试Arnold&#x27;s cat map&quot;&quot;&quot;</span></span><br><span class="line">    img = cv2.imread(data_file_path(<span class="string">&#x27;data/image/lena.png&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">231</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;Lena&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">232</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(arnold(img, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;Lena encrypt t1-a1-b1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">233</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(arnold(img, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>), cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;encrypt t2-a1-b1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">234</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(arnold(img, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>), cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;encrypt t3-a1-b1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    encrypt_img = arnold(img, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    plt.subplot(<span class="number">235</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(arnold(img, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>), cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;encrypt t5-a1-b2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    decrypt_img = de_arnold(encrypt_img, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    plt.subplot(<span class="number">236</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(decrypt_img, cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;decrypt t5-a1-b2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>代码输出如下：</p>
<center>
<img src="/2024/11/03/图片猫脸转换加密/arnold.png" alt="点击查看大图:vi/vim-cheat-sheet">
</center>
<p>可以看到虽然5次a=1
b=2的变换后图片已经摇匀了，但是经过一次逆变换还是可以无损变回原图。</p>
<h1 id="验证直方图不变">验证直方图不变</h1>
<p>Arnold变换只是改变了像素值的位置，其像素值是没发生变化的，因此其像素直方图统计特性是没有改变的，非常有利于采用直方图平移嵌入额外信息。也正是因为像素值没发生变化，其图像的信息内容存在着泄漏可能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_histogram</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;猫脸变化直方图&quot;&quot;&quot;</span></span><br><span class="line">    img = cv2.imread(data_file_path(<span class="string">&#x27;data/image/lena.png&#x27;</span>))</span><br><span class="line">    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    hist = cv2.calcHist([gray_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">255</span>])  <span class="comment"># 计算图像第一个通道的直方图</span></span><br><span class="line"></span><br><span class="line">    encrypt_img = arnold(img, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    gray_encrypt_img = cv2.cvtColor(encrypt_img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    encrypt_hist = cv2.calcHist([gray_encrypt_img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">255</span>])  <span class="comment"># 计算图像第一个通道的直方图</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> np.array_equal(hist, encrypt_hist)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置字体</span></span><br><span class="line">    matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示原始图像和绘制的直方图</span></span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.imshow(gray_img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;(a)Lena灰度图像&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.plot(hist, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;(b)直方图曲线&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.imshow(gray_encrypt_img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;(a)Lena转换后灰度图像&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.plot(encrypt_hist, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;(b)直方图曲线&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>输出结果参考</p>
<center>
<img src="/2024/11/03/图片猫脸转换加密/hist.png" alt="点击查看大图:vi/vim-cheat-sheet">
</center>
<h1 id="验证周期">验证周期</h1>
<p>如果图片的长不等于宽时，Arnold变换逆变换不成立，如何还原图像呢。这时候就可以结合周期表了，我们让图片变换周期次数就可以了。那么问题又来了，长宽不等，那么对应的周期也不等，我们选择长的周期还是宽的周期。一个保守的方案是选择长周期和宽周期的最小公倍数。</p>
<p>通过狭义的（a=1,b-1）Arnold变换周期表，我们大概可以看到周期约等于边长的0.75倍。为了方便演示，我们吧lena图片进行缩放为（32,64），结合周期表知道64的周期为48.进行验证如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_arnold_period</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;猫脸变化直方图&quot;&quot;&quot;</span></span><br><span class="line">    img = cv2.imread(data_file_path(<span class="string">&#x27;data/image/lena.png&#x27;</span>))</span><br><span class="line">    img_small = cv2.resize(img, (<span class="number">32</span>, <span class="number">64</span>), interpolation=cv2.INTER_AREA)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(img_small, cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;(b)Lena 32*64&quot;</span>)</span><br><span class="line"></span><br><span class="line">    encrypt = arnold(img_small, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(encrypt, cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;encrypt t1-a1-b1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    <span class="comment"># 逆变换已经不管用了</span></span><br><span class="line">    plt.imshow(cv2.cvtColor(de_arnold(encrypt, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;decrypt t1-a1-b1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    <span class="comment"># 47 对应边长64的周期48（应该是长宽两个周期的最小公倍数）然后减去1，即47</span></span><br><span class="line">    plt.imshow(cv2.cvtColor(arnold(encrypt, <span class="number">47</span>, <span class="number">1</span>, <span class="number">1</span>), cv2.COLOR_BGR2RGB))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;decrypt t48-a1-b1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<center>
<img src="/2024/11/03/图片猫脸转换加密/period.png" alt="点击查看大图:vi/vim-cheat-sheet">
</center>
]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>神采奕奕</title>
    <url>/2019/03/24/%E7%A5%9E%E9%87%87%E5%A5%95%E5%A5%95/</url>
    <content><![CDATA[<p>成长的日记</p>
<span id="more"></span>
<h1 id="神采奕奕神采飞扬">神采奕奕，神采飞扬</h1>
<p>小家伙喜欢吃蛋糕，喜欢跳舞，喜欢跳着走路。</p>
<p>小家伙喜欢唱歌，喜欢背诵古诗，喜欢飞快的背诵。</p>
<p>小家伙喜欢爬高，喜欢床上打滚，喜欢贴画。</p>
<p>小家伙喜欢宝宝巴士，喜欢汪汪队，喜欢巧虎。</p>
<p>小家伙偶尔不喜欢斑马英语，常常不喜欢吃感冒药。</p>
<p>小家伙会背诵悯农。</p>
<p>小家伙会自我介绍。</p>
<p>小家伙会数到10了。</p>
<p>小家伙会说好吧好的。</p>
<p>小家伙会吹响口琴。</p>
<p>小家伙喜欢24点，车牌号快速24点。</p>
<h1 id="神采奕奕持之以恒">神采奕奕，持之以恒</h1>
<p>小家伙的笑容真可爱</p>
<p>小家伙走路像跳舞</p>
<p>小家伙的踏板车上的风车真漂亮</p>
]]></content>
      <categories>
        <category>奕</category>
      </categories>
      <tags>
        <tag>奕奕</tag>
      </tags>
  </entry>
  <entry>
    <title>素数之恋</title>
    <url>/2019/03/24/%E7%B4%A0%E6%95%B0%E4%B9%8B%E6%81%8B/</url>
    <content><![CDATA[<p>啊哈，我证明了黎曼猜想，但空白处太小，我写不下~~</p>
<span id="more"></span>
<h1 id="引子">引子</h1>
<p>小时候的课程名，是很值得回味的。譬如自然，思想品德，咋一读起，郎朗上口外还有些时间疏离感，仿佛它们只是些美好却又古朴的知识，不如那些一直陪伴，从小学，至中学，甚至大学的基础学科坚守，如语文，数学，物理，化学，过了许多学生时代，它们的名字依然如故。这些名字有着极深的抽象，才能一直简洁的描述这个世界。</p>
<p>物理：格物致理；化学：物各有质，自有变化；数学：九数。这里的九既是九章算术之九，也是数之极，数学本身就是一种无穷的抽象。最近读的就是数论的一角：素数。</p>
<p>素数或者质数，不如说是独数，孤数。整个数字世界中，有效的因子只有自己，也许只有素数才能算独立无二。</p>
<p>以下均为读素数之恋手记。</p>
<h1 id="论文">论文</h1>
<p>1859年，伯恩哈德·黎曼（Bernhard
Riemann）成为柏林科学院的通讯院士，对于一个青年数学家来说（32岁的黎曼），
这是一个崇高的荣誉。依照惯例，黎曼向科学院提交了一篇论文，论文题目是：“<strong>论小于一个给定值的素数的个数</strong>”。</p>
<h4 id="假设">假设</h4>
<p>ζ函数的所有非平凡零点的实部都是1/2</p>
<h4 id="纸牌游戏和调和级数">纸牌游戏和调和级数</h4>
<p>52张纸牌叠放在桌子上，第一张纸牌向右移动多远才不会掉下来，答案是1/2，此时第一张纸牌的中心刚好在边缘，如果这时候继续移动第二张纸牌，移动多远两张纸牌不会掉下来，答案是1/4，大家可以用杠杆原理求解下（have
a
try），那么继续移动第三张多远上面的三张纸牌不会掉下来，答案是1/6。是的也许可以按照行测里面的推论题给出答案了，第四张1/8。大家可以加下去也就是1/2+1/4+1/6+1/8+...+1/102。或者1/2*(1+1/2+1/3+1/4+...+1/51)。这就是大名鼎鼎的调和级数1+1/2+1/3+1/4+...+1/n。</p>
<p>调和级数是收敛的么？答案是不，它是发散的。中世纪的晚期的法国学者奥雷姆（Nicole
d'Oresme,约1323-1382，这个年代中国处于元末明初，想想当时的华夏应该没有多少人会去想这个问题，也许连倒数还未抽象出来）给出来一个简单的证明。易得：1/3+1/4大于1/2，1/5+1/6+1/7+1/8大于1/2，也即可知这个级数按2的幂次方分段，每段都大于1/2，也即有无限个1/2。即这个级数是发散。</p>
<p>再看看其他的数列，比如1/1,3/2,7/5,17/12,41/29,99/70,239/169…。递推逻辑是分子+分母等于新的分母，分子+2倍的分母等于先得分子。这个数列的极限是2的平方根（1.414...），也就是2^(1/2)。</p>
<p>再看一个有名的数列，1<sup>1,(1+1/2)</sup>2,,(1+1/3)<sup>3,,(1+1/4)</sup>4...,(1+1/n)^n。这个数列的极限大家都比较熟悉了它就是大名鼎鼎的e，自然对数的底数e，2.718281828459...。我们高中遇到它，竟然就自然而然的接受了它，大概是高中的时候我们接受了太多的物理常数（g,G,h）和化学常数（阿伏加德罗），于是对这个e也就见怪不怪了。具体的e的科普可以参见知乎专栏—直观の数学。</p>
<p>再说一个让人珍惜学校时光的话，我们高二就学完了高中的课程，高三这一年大多是温故而知新，其实这个知新最好的的方式不是温故，而是求索，如果你高三能够在温故的同时，学习下奥数，高数，你会获得极大的成长！取得数学状元也有很大可能。进来大学后，教学方式和学习环境变化巨大，这时候如果可以重来我希望能好好的学习数学（我们学校是微积分，线代，复变），是那种充分的理解，能够若干年后还可以形象的从大脑cpu中渲染出来，推理出来的那种理解。而不只是考试得了90+。</p>
<h1 id="素数概率">素数概率</h1>
<h4 id="上帝之手-欧拉公式">上帝之手-欧拉公式</h4>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
</search>
